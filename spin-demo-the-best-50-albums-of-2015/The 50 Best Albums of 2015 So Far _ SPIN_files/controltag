
/* Controltag Loader for SpinMedia */
(function(){
  var debugging = /kxdebug/.test(location);
  var log = function() {
    // It's a flag, so if it's there, then it means debug.
    debugging && window.console && console.log([].slice.call(arguments).join(' '));
  };

  var load = function(url, callback) {
    log('Loading script from:', url);
    var node = document.createElement('script');
    node.async = true;  // This is just to be friendly.
    node.src = url;

    // Connect to both in case we're in older IE.
    node.onload = node.onreadystatechange = function() {
      var state = node.readyState;
      if (!callback.done && (!state || /loaded|complete/.test(state))) {
        log('Script loaded from:', url);
        callback.done = true;  // Mark the callback, so we don't load it twice on accident.
        callback();
      }
    };

    // Fetch the first script element, so we can insert the
    // controltag before it. There *must* be at least one
    // script element, or this code would never be called
    var sibling = document.getElementsByTagName('script')[0];
    sibling.parentNode.insertBefore(node, sibling);
  };

  // ControlTag simply crashes when opening a website from Twitter browser on
  // iOS, temporarily disable CT when Twitter for iPhone is detected until they
  // fix this (works fine with other twitter client though)
  if (/Twitter for iPhone/.test(window.navigator.userAgent || '')) return;

  var config = {"partner_segment_map": {}, "context_terms": [], "tags": [{"content": "<script>\r\n(function(){\r\n  if (window.Krux) {\r\n    var kuid = window.Krux('get', 'user');\r\n    if (kuid && typeof kuid != 'undefined') {\r\n       var rubicon_url = '//tap.rubiconproject.com/oz/feeds/krux/tokens?afu=' + kuid;\r\n       var i = new Image();\r\n       i.src = rubicon_url;\r\n    }\r\n  }\r\n})();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 1, "content_type": "html", "freq_cap": 3, "timing": "asap", "method": "document", "type": "publisher", "id": 52890, "name": "Rubicon Project User Match"}, {"content": "<script type=\"text/javascript\">\r\n(function(require) {\r\n    var config = require('config')();\r\n    var store = require('store');\r\n    var _ = require('util');\r\n    var segments;\r\n\r\n    function handleUserDataResponse(r) {\r\n        // Handle the response as usual.\r\n        segments.handleUserDataResponse(r);\r\n\r\n        // Override localStorage.kxuser with a case-insensitive value for DFP premium.\r\n        // This will get read by the interchange direct snippet for Krux.user\r\n        // and Krux.dfpKeyValues\r\n        if(r.kuid_long) {\r\n            store.set('user', r.kuid_long, store.DAYS*30);\r\n        }\r\n    }\r\n\r\n    function useFirstPartyCookie() {\r\n        // Older versions of CT don't have feature.\r\n        try {\r\n            var feature = Krux('require:feature');\r\n            // If they don't have 3rd party cookies, then we rely on 1st party.\r\n            return !feature.hasThirdPartyCookies();\r\n        } catch (e){\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Our own fetch uses our own handleResponse\r\n    function fetch() {\r\n        var data = {pub: _.get('pubid')};\r\n\r\n        // Skip \r\n        if (useFirstPartyCookie() && Krux('get', 'user')) {\r\n            data._kuid = Krux('get', 'user');\r\n        }\r\n        var options = {\r\n            url: _.get('url_userdata'),\r\n            data: data,\r\n            callback: 'kxjsonp_userdata',\r\n            done: handleUserDataResponse\r\n        };\r\n\r\n        // SEE: SCRUM-1129\r\n        var orgUserId = _.get('org_user_id');\r\n        if(orgUserId) {\r\n            options.data._kuid = orgUserId;\r\n        }\r\n\r\n        var fpId, fp;\r\n        var useFingerprint = config.get('params.fingerprint', false);\r\n        if (useFingerprint) {\r\n            fpId = _.get('fp_id');\r\n            options.data.kxfp = fp = _.get('fp');\r\n            // Ensure we don't send the fingerprint as the id (it mascarades in fallback mode)\r\n            if (fpId && fpId.length !== fp.length) {\r\n                options.data.kfuid = fpId;\r\n            }\r\n        }\r\n\r\n        if(!segments.readTechFromStore()) {\r\n            options.data.technographics = 1;\r\n        }\r\n        require('http').jsonp(options);\r\n    }\r\n\r\n    if (!useFirstPartyCookie()) {\r\n        Krux('set', 'user', Krux('require:store').get('kuid'));\r\n    }\r\n\r\n    if(!store.get('segWait')) {\r\n        // disable segments.fetch and use our own\r\n        _.set('segWait', 1, store.MINUTES*5);\r\n        _.onOnce('dom:load', fetch);\r\n        _.fire('user_data_fetch_scheduled');\r\n    }\r\n\r\n    // Finally, require segments as usual.\r\n    segments = require('segments');\r\n}(Krux.require));\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 2, "internal": 1, "content_type": "html", "timing": "asap", "method": "document", "type": "publisher", "id": 53782, "name": "Load Segments V4"}, {"content": "<script>\r\n(function(){\r\n  var kuid = Krux('get', 'user');\r\n  if (kuid && typeof kuid != 'undefined') {\r\n      var prefix = location.protocol == 'https:' ? \"https:\" :\"http:\";\r\n      var r_url = prefix + '//cm.g.doubleclick.net/pixel'\r\n      var kurl = prefix + '//apiservices.krxd.net/um?partner=google&r=' + r_url;\r\n      var i = new Image();\r\n      i.src = kurl;\r\n  }\r\n})();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 3, "internal": 1, "content_type": "html", "freq_cap": 3, "timing": "asap", "method": "document", "type": "publisher", "id": 48949, "name": "Google User Matching"}, {"content": "<img src=\"//adadvisor.net/adscores/g.js?sid=9212244187&_kdpid=2111c0af-fc3a-446f-ab07-63aa74fbde8e\" />", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 22, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "type": "data provider", "id": 48943, "name": "Neustar AdAdvisor S2S provider tag"}, {"content": "<script>\r\n(function(){\r\n  var kuid = Krux('get', 'user');\r\n  if (kuid) {\r\n      var liveramp_url = 'https://idsync.rlcdn.com/379708.gif?partner_uid=' + kuid;\r\n      var i = new Image();\r\n      i.src = liveramp_url;      \r\n  }\r\n})();\r\n</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 21, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "type": "data provider", "id": 48944, "name": "Acxiom S2S provider tag"}, {"content": "<script>\r\n(function() {\r\n  var sniff;\r\n  try {\r\n    sniff = Krux('require:sniff');\r\n  } catch(e) {} \r\n\r\n  // krxd.nexac.com throws SSL cert errors so only fire this tag\r\n  // on HTTP pages\r\n  if (location.protocol == \"http:\") {\r\n      var kuid = Krux('get', 'user');\r\n      if (kuid) {\r\n         var u = \"http://krxd.nexac.com/dlx.gif?_kdpid=2dd640a6-6ebd-4d4f-af30-af8baa441a0d&kuid=\" + kuid;\r\n         (new Image()).src = u;\r\n         var di = \"http://beacon.krxd.net/event.gif?event_id=Jo7PIOui&type=regular&event_type=cnt\";\r\n         (new Image()).src = di;   \r\n      }\r\n      else if (sniff && sniff.browser === sniff.Browsers.SAFARI) {\r\n        var u = \"http://krxd.nexac.com/dlx.gif?_kdpid=2dd640a6-6ebd-4d4f-af30-af8baa441a0d&browser=safari&kuid=\" + kuid;\r\n        (new Image()).src = u;\r\n      }\r\n   } else {\r\n       var di = \"https://beacon.krxd.net/event.gif?event_id=Jo7PIOui&type=secure&event_type=cnt\";\r\n       (new Image()).src = di;   \r\n   }\r\n})();\r\n</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 8, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "type": "data provider", "id": 48945, "name": "DataLogix provider tag"}, {"content": "<script>\r\n  Krux('require:http').pixel({\r\n    url: \"//s.ixiaa.com/digi/C726AB29-0470-440B-B8D2-D552CED3A3DC/a.gif\"\r\n  });\r\n</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 28, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "type": "data provider", "id": 48946, "name": "IXI Digital Open Market provider tag"}, {"content": "<script>\r\n(function(){\r\n  var kuid = Krux('get', 'user');\r\n  if (kuid) {\r\n    Krux('require:http').pixel({\r\n      url: \"//loadm.exelator.com/load\",\r\n      data: {\r\n          _kdpid: 'e4942ff0-4070-4896-a7ef-e6a5a30ce9f9',\r\n          buid: kuid,\r\n          p: '204',\r\n          g: '270',\r\n          j: '0'\r\n      }});\r\n  }\r\n  })();\r\n</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 11, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "type": "data provider", "id": 48947, "name": "eXelate Media provider tag"}, {"content": "<script type=\"text/javascript\">Krux('social.init');</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "internal": 1, "template_replacement": 1, "execution_results": null, "tier": 1, "library_tag_config": {}, "content_type": "html", "timing": "onload", "method": "document", "type": "library", "id": 45123, "name": "Krux Track Social"}, {"content": "<script>\r\n// this tag is intentionally blank\r\n</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 6, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "type": "data provider", "id": 45124, "name": "Technographic Data provider tag"}, {"content": "", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 14, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "id": 45125, "name": "Krux Geographic Data provider tag"}, {"content": "<script type=\"text/javascript\">\r\n(function() {\r\n\tvar domain = Krux('get','domain').replace('www.','');\r\n\tKrux('set', 'page_attr_domain', domain);\r\n\t\r\n\tif(domain == 'spin.com')  {\r\n  \tvar kxs = Krux('require:sizzle');\r\n  \tvar sectionSelector = kxs.find('#menu .main-nav .selected a')[0];\r\n  \tvar spinSection = sectionSelector && sectionSelector.innerText;\r\n  \tvar spinPageCategory = window.dataLayer && dataLayer[0] && dataLayer[0].category && dataLayer[0].category.split(',');\r\n  \tvar spinPageType = window.dataLayer && dataLayer[0] && dataLayer.pagetype && dataLayer[0].pagetype.split(',');\r\n  \tvar spinPageTags = window.dataLayer && dataLayer[0] && dataLayer[0].tags && dataLayer[0].tags.split(',');\r\n  \t\r\n  \tif(spinSection) Krux('set', 'page_attr_spinSection', spinSection);\r\n  \tif(spinPageCategory) Krux('set', 'page_attr_spinPageCategory', spinPageCategory);\r\n  \tif(spinPageType) Krux('set', 'page_attr_spinPageType', spinPageType);\r\n  \tif(spinPageTags) Krux('set', 'page_attr_spinPageTags', spinPageTags);\r\n\t}\r\n})();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": {"onloadSafe": true, "docwrite": false, "listeners": []}, "tier": 1, "internal": 1, "content_type": "html", "timing": "onload", "method": "document", "type": "publisher", "id": 55002, "name": "DTC (o&o-music)"}], "segments": [], "publisher": {"uuid": "d3708d12-253c-4c29-b00d-80311e9aaaad", "id": 12404, "name": "SpinMedia"}, "controltag_options": {"async": "true", "render": true}, "site": {"id": 20306, "name": "o&o-music"}, "dnt": null, "params": {"connector_host": "connector.krxd.net", "control_tag_load_sync": "false", "fingerprint": false, "disable_http_compression": false, "remove_kxhead": true, "supertag_requires_approval": false, "config_source": 1, "control_tag_stats_prefix": null, "beacon_host": "beacon.krxd.net", "max_segments": null, "control_tag_pixel_throttle": "100", "user_id_cookie": null, "first_party_uid": false, "no_pii": 0, "recommend": "false", "revenue_optimization": false, "context_terms": "false", "jslog_host": "jslog.krxd.net", "site_level_supertag_config": "site", "max_slot_time": 1000, "services_host": "apiservices.krxd.net", "capture_leakage": true, "client_side_storage": "localStorage,cookie", "userData_host": "cdn.krxd.net", "control_tag_namespace": "spinmedia", "control_tag_version": "stable", "capture_js_errors": "true", "datatag_version": "3", "dfp_premium": "true", "userdata_host": "cdn.krxd.net", "target_fingerprint": false}, "services": {"impression": "//beacon.krxd.net/ad_impression.gif", "stats": "//apiservices.krxd.net/stats", "userdata": "//cdn.krxd.net/userdata/get", "userData": "//cdn.krxd.net/user_data/segments/3", "um": "//apiservices.krxd.net/um", "optout": "//beacon.krxd.net/optout_check", "pixel": "//beacon.krxd.net/pixel.gif", "contentConnector": "//connector.krxd.net/content_connector/", "is_optout": "//beacon.krxd.net/optout_check", "set_optin": "//apiservices.krxd.net/consumer/optin", "social": "//beacon.krxd.net/social.gif", "set_optout": "//apiservices.krxd.net/consumer/optout", "data": "//beacon.krxd.net/data.gif", "event": "//beacon.krxd.net/event.gif", "log": "//jslog.krxd.net/jslog.gif"}, "geo": {}, "realtime_segments": [], "confid": "JrVEz4WY"};

  // Wrap in a function and comment, then toString the func and replace
  // everything that's not the beginning or end of a JSON object, so we get a
  // string that's either empty or JSON.
  var esiGeo = String(function(){/*
    <esi:include src="/geoip_esi"/>
  */}).replace(/^.*\/\*[^{]+|[^}]+\*\/.*$/g, '');

  if (esiGeo) {
    log('Got a request for:', esiGeo, 'adding geo to config.');
    try {
      config.geo = window.JSON.parse(esiGeo);
    } catch (__) {
      // Couldn't parse, so setting to {}
      log('Unable to parse geo from:', config.geo);
      config.geo = {};
    }
  }

  
  
  

  load('//cdn.krxd.net/ctjs/controltag.js.875fd5b280a77e06def8c74a5a268e2c', function() {
    
    
    log('Loading krux configuration.');

    Krux('config', config);

    
  });
})();
